type Booleanish = boolean | "true" | "false";
declare const dataAttr: (guard: boolean | undefined) => Booleanish;
declare const ariaAttr: (guard: boolean | undefined) => "true" | undefined;

declare const MAX_Z_INDEX = 2147483647;

type Target = HTMLElement | EventTarget | null | undefined;
declare function contains(parent: Target, child: Target): boolean;

declare function getDocument(el: Element | Node | Document | null): Document;
declare function getDocumentElement(el: Element | Node | Document | null): HTMLElement;
declare function getWindow(el: Node | ShadowRoot | Document | undefined): Window & typeof globalThis;
declare function getActiveElement(el: HTMLElement): HTMLElement | null;
declare function getComputedStyle(el: HTMLElement): any;

declare function getBeforeInputValue(event: Pick<InputEvent, "currentTarget">): string;
declare function getEventTarget<T extends EventTarget>(event: Event): T | null;
declare const isSelfEvent: (event: Pick<UIEvent, "currentTarget" | "target">) => boolean;

type Root = Document | Element | null | undefined;
declare function queryAll<T extends HTMLElement = HTMLElement>(root: Root, selector: string): T[];
declare function query<T extends HTMLElement = HTMLElement>(root: Root, selector: string): T | null;
type ItemToId<T> = (v: T) => string;
declare const defaultItemToId: <T extends HTMLElement>(v: T) => string;
declare function itemById<T extends HTMLElement>(v: T[], id: string, itemToId?: ItemToId<T>): T | undefined;
declare function indexOfId<T extends HTMLElement>(v: T[], id: string, itemToId?: ItemToId<T>): number;
declare function nextById<T extends HTMLElement>(v: T[], id: string, loop?: boolean): T;
declare function prevById<T extends HTMLElement>(v: T[], id: string, loop?: boolean): T | null;

declare function getByText<T extends HTMLElement>(v: T[], text: string, currentId?: string | null, itemToId?: ItemToId<T>): T | undefined;

interface TypeaheadState {
    keysSoFar: string;
    timer: number;
}
interface TypeaheadOptions {
    state: TypeaheadState;
    activeId: string | null;
    key: string;
    timeout?: number;
    itemToId?: ItemToId<HTMLElement>;
}
declare function getByTypeaheadImpl<T extends HTMLElement>(_items: T[], options: TypeaheadOptions): T | undefined;
declare const getByTypeahead: typeof getByTypeaheadImpl & {
    defaultOptions: {
        keysSoFar: string;
        timer: number;
    };
    isValidEvent: typeof isValidTypeaheadEvent;
};
declare function isValidTypeaheadEvent(event: Pick<KeyboardEvent, "key" | "ctrlKey" | "metaKey">): boolean;

declare function getParentNode(node: Node): Node;

interface ScrollPosition {
    scrollLeft: number;
    scrollTop: number;
}
declare function getScrollPosition(element: HTMLElement | Window): ScrollPosition;

declare const isHTMLElement: (v: any) => v is HTMLElement;
declare const isDocument: (el: any) => el is Document;
declare const getNodeName: (node: Node | Window) => string;
declare function isRootElement(node: Node): boolean;
declare const isNode: (el: any) => el is Node;
declare const isShadowRoot: (el: any) => el is ShadowRoot;

declare function isEditableElement(el: HTMLElement | EventTarget | null): boolean;

declare function isHiddenElement(node: HTMLElement): boolean;

declare function isOverflowElement(el: HTMLElement): boolean;

type OverflowAncestor = Array<VisualViewport | Window | HTMLElement | null>;
declare function getNearestOverflowAncestor(el: Node): HTMLElement;
declare function getOverflowAncestors(el: HTMLElement, list?: OverflowAncestor): OverflowAncestor;

declare const isDom: () => boolean;
declare function getPlatform(): any;
declare const isTouchDevice: () => boolean;
declare const isMac: () => boolean;
declare const isSafari: () => boolean;
declare const isFirefox: () => boolean;
declare const isApple: () => boolean;
declare const isIos: () => boolean;

declare function nextTick(fn: VoidFunction): () => void;
declare function raf(fn: VoidFunction): () => void;

interface ScopeContext {
    getRootNode?(): Document | ShadowRoot | Node;
}
declare function createScope<T>(methods: T): {
    getRootNode: (ctx: ScopeContext) => Document | ShadowRoot;
    getDoc: (ctx: ScopeContext) => Document;
    getWin: (ctx: ScopeContext) => Window & typeof globalThis;
    getActiveElement: (ctx: ScopeContext) => HTMLElement | null;
    isActiveElement: (ctx: ScopeContext, elem: HTMLElement | null) => boolean;
    getById: <T_1 extends HTMLElement = HTMLElement>(ctx: ScopeContext, id: string) => T_1 | null;
    setValue: <T_2 extends {
        value: string;
    }>(elem: T_2 | null, value: string | number | null | undefined) => void;
} & T;

interface ScrollOptions extends ScrollIntoViewOptions {
    rootEl: HTMLElement | null;
}
declare function scrollIntoView(el: HTMLElement | null | undefined, options?: ScrollOptions): void;

export { type ItemToId, MAX_Z_INDEX, type ScopeContext, type ScrollOptions, type ScrollPosition, type TypeaheadOptions, type TypeaheadState, ariaAttr, contains, createScope, dataAttr, defaultItemToId, getActiveElement, getBeforeInputValue, getByText, getByTypeahead, getComputedStyle, getDocument, getDocumentElement, getEventTarget, getNearestOverflowAncestor, getNodeName, getOverflowAncestors, getParentNode, getPlatform, getScrollPosition, getWindow, indexOfId, isApple, isDocument, isDom, isEditableElement, isFirefox, isHTMLElement, isHiddenElement, isIos, isMac, isNode, isOverflowElement, isRootElement, isSafari, isSelfEvent, isShadowRoot, isTouchDevice, itemById, nextById, nextTick, prevById, query, queryAll, raf, scrollIntoView };
