import * as _chakra_ui_styled_system from '@chakra-ui/styled-system';
import { StyleFunctionProps } from '@chakra-ui/theme-tools';

declare const alertTheme: {
    baseStyle?: {
        container: {
            borderRadius: string;
        };
    } | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "icon" | "title" | "description" | "spinner")[];
        }>;
    } | undefined;
    variants?: {
        snackbar: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            container: {
                bg: string;
                _dark: {
                    bg: string;
                };
                borderWidth: string;
            };
            icon: {
                color: string;
                _dark: {
                    color: string;
                };
                '& .chakra-spinner': {
                    color: string;
                    _dark: {
                        color: string;
                    };
                };
            };
            title: {
                fontWeight: string;
                fontSize: string;
            };
            description: {
                fontSize: string;
                color: string;
                _dark: {
                    color: string;
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: "snackbar" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "icon" | "title" | "description" | "spinner")[];
};

declare const badgeTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            _dark: {
                [x: string]: string;
            };
        };
        ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            shadow: string;
            _dark: {
                [x: string]: string;
            };
        };
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: "outline" | "ghost" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const buttonTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _dark: {
                    bg: string;
                    _disabled?: undefined;
                };
                _disabled: {
                    bg: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark?: undefined;
            };
            _dark?: undefined;
        } | {
            bg: string;
            color: string;
            _dark: {
                bg: string;
                color: string;
            };
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark: {
                    color: string;
                };
            };
        } | {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark?: undefined;
            };
            _active: {
                bg: string;
                _dark?: undefined;
            };
            _disabled?: undefined;
            _dark?: undefined;
        };
        ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            color: string;
            _dark: {
                color: string;
            };
            _hover: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            bg?: undefined;
        } | {
            color: string;
            _hover: {
                bg: string;
                _dark?: undefined;
            };
            _active: string;
            _dark?: undefined;
            bg?: undefined;
        } | {
            color: string;
            _dark: {
                color: string;
            };
            bg: string;
            _hover: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
        };
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            borderColor: string;
            borderWidth: string;
            _hover: {
                borderColor: string;
            };
            color: string;
            _dark: {
                color: string;
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            bg?: undefined;
        } | {
            borderColor: string;
            borderWidth: string;
            _hover: {
                borderColor: string;
            };
            color: string;
            _active: string;
            _dark?: undefined;
            bg?: undefined;
        } | {
            borderColor: string;
            borderWidth: string;
            _hover: {
                borderColor: string;
            };
            color: string;
            _dark: {
                color: string;
            };
            bg: string;
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
        };
        subtle: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            color: string;
            bg: string;
            _dark: {
                bg: string;
                color: string;
            };
            _hover: {
                bg: string;
                _dark: {
                    color: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
        } | {
            color: string;
            bg: string;
            _hover: {
                bg: string;
                _dark?: undefined;
            };
            _active: {
                bg: string;
                _dark?: undefined;
            };
            _dark?: undefined;
        };
        elevated: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _dark: {
                    bg: string;
                    _disabled?: undefined;
                };
                _disabled: {
                    bg: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark?: undefined;
            };
            _dark?: undefined;
            shadow: string;
        } | {
            bg: string;
            color: string;
            _dark: {
                bg: string;
                color: string;
            };
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark: {
                    color: string;
                };
            };
            shadow: string;
        } | {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark?: undefined;
            };
            _active: {
                bg: string;
                _dark?: undefined;
            };
            _disabled?: undefined;
            _dark?: undefined;
            shadow: string;
        };
        link: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            padding: number;
            height: string;
            lineHeight: string;
            verticalAlign: string;
            color: string;
            _hover: {
                textDecoration: string;
                _disabled: {
                    textDecoration: string;
                };
            };
            _active: {
                color: string;
            };
        };
        primary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _dark: {
                    bg: string;
                    _disabled?: undefined;
                };
                _disabled: {
                    bg: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark?: undefined;
            };
            _dark?: undefined;
        } | {
            bg: string;
            color: string;
            _dark: {
                bg: string;
                color: string;
            };
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark: {
                    color: string;
                };
            };
        } | {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark?: undefined;
            };
            _active: {
                bg: string;
                _dark?: undefined;
            };
            _disabled?: undefined;
            _dark?: undefined;
        };
        secondary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _dark: {
                    bg: string;
                    _disabled?: undefined;
                };
                _disabled: {
                    bg: string;
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark?: undefined;
            };
            _dark?: undefined;
        } | {
            bg: string;
            color: string;
            _dark: {
                bg: string;
                color: string;
            };
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            _disabled: {
                color: string;
                _dark: {
                    color: string;
                };
            };
        } | {
            bg: string;
            color: string;
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
                _dark?: undefined;
            };
            _active: {
                bg: string;
                _dark?: undefined;
            };
            _disabled?: undefined;
            _dark?: undefined;
        };
        tertiary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            borderColor: string;
            borderWidth: string;
            _hover: {
                borderColor: string;
            };
            color: string;
            _dark: {
                color: string;
            };
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
            bg?: undefined;
        } | {
            borderColor: string;
            borderWidth: string;
            _hover: {
                borderColor: string;
            };
            color: string;
            _active: string;
            _dark?: undefined;
            bg?: undefined;
        } | {
            borderColor: string;
            borderWidth: string;
            _hover: {
                borderColor: string;
            };
            color: string;
            _dark: {
                color: string;
            };
            bg: string;
            _active: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: "link" | "outline" | "subtle" | "solid" | "primary" | "ghost" | "elevated" | "secondary" | "tertiary" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const cardTheme: {
    baseStyle?: (() => {
        container: {
            transitionProperty: string;
            transitionDuration: string;
        };
    }) | undefined;
    sizes?: {
        sm: {
            container: {
                [x: string]: string;
            };
        };
        md: {
            container: {
                [x: string]: string;
            };
        };
        lg: {
            container: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        elevated: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            container: {
                [x: string]: string | {
                    [x: string]: string;
                    _dark?: undefined;
                } | {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string;
                    };
                };
                _dark: {
                    [x: string]: string;
                };
                '&.chakra-linkbox:hover': {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string;
                    };
                };
            };
        };
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            container: {
                [x: string]: string | {
                    [x: string]: string;
                    '&.chakra-linkbox:hover'?: undefined;
                } | {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    '&.chakra-linkbox:hover': {
                        [x: string]: string;
                    };
                };
                '&.chakra-linkbox:hover': {
                    [x: string]: string;
                };
                _dark: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    '&.chakra-linkbox:hover': {
                        [x: string]: string;
                    };
                };
            };
        };
        filled: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            container: {
                [x: string]: string | {
                    [x: string]: string;
                    '&.chakra-linkbox:hover'?: undefined;
                } | {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    '&.chakra-linkbox:hover': {
                        [x: string]: string;
                    };
                };
                color: string;
                '&.chakra-linkbox:hover': {
                    [x: string]: string;
                };
                _dark: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    '&.chakra-linkbox:hover': {
                        [x: string]: string;
                    };
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | undefined;
        variant?: "outline" | "filled" | "elevated" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "body" | "footer" | "header")[];
};

declare const checkboxTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        control: {
            _checked: {
                borderColor: string;
                bg: string;
                color: string;
            };
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "icon" | "label" | "control")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "icon" | "label" | "control")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "icon" | "label" | "control")[];
};

declare const closeButtonTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const formLabelTheme: {
    variants: {
        horizontal: {
            mb: number;
            marginStart: string;
        };
    };
};
declare const inputTheme: {
    baseStyle?: _chakra_ui_styled_system.PartsStyleInterpolation<{
        keys: ("group" | "addon" | "field" | "element")[];
    }> | undefined;
    sizes?: {
        sm: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        md: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        lg: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            field: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                _hover: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | undefined;
        variant?: "outline" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("group" | "addon" | "field" | "element")[];
};
declare const numberInputTheme: {
    baseStyle?: _chakra_ui_styled_system.PartsStyleInterpolation<{
        keys: ("group" | "addon" | "field" | "element")[];
    }> | undefined;
    sizes?: {
        sm: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        md: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        lg: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            field: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                _hover: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | undefined;
        variant?: "outline" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("group" | "addon" | "field" | "element")[];
};
declare const pinInputTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        sm: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        md: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        lg: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            field: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                _hover: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | undefined;
        variant?: "outline" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};
declare const textareaTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: "outline" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};
declare const nativeSelectTheme: {
    baseStyle?: Partial<Record<"group" | "addon" | "field" | "element", _chakra_ui_styled_system.SystemStyleObject>> | _chakra_ui_styled_system.PartsStyleFunction<{
        keys: ("group" | "addon" | "field" | "element")[];
    }> | undefined;
    sizes?: {
        sm: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        md: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        lg: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            field: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                _hover: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | undefined;
        variant?: "outline" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const selectTheme: {
    baseStyle?: {
        addon: {
            height: string;
            fontSize: string;
            px: string;
            borderRadius: string;
        };
        field: {
            width: string;
            height: string;
            fontSize: string;
            px: string;
            borderRadius: string;
            minWidth: number;
            outline: number;
            position: string;
            appearance: string;
            transitionProperty: string;
            transitionDuration: string;
            _disabled: {
                opacity: number;
                cursor: string;
            };
        };
    } | undefined;
    sizes?: {
        sm: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        md: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
        lg: {
            field: {
                [x: string]: string;
            };
            group: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            field?: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                _hover: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                };
            } | undefined;
        };
        flushed: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
        filled: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
        unstyled: {};
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | undefined;
        variant?: "outline" | "filled" | "unstyled" | "flushed" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const headingTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const kbdTheme: {
    baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        basic: {
            opacity: number;
        };
        solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            color: string;
            _dark: {
                bg: string;
            };
            borderWidth: number;
            borderBottomWidth: number;
            padding: string;
            display: string;
            borderRadius: string;
            minW: string;
            textAlign: string;
            mr: number;
            ':last-child': {
                mr: number;
            };
        };
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: "solid" | "basic" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const menuTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        list: {
            borderWidth: number;
            borderColor: string;
            boxShadow: string;
            _dark: {
                borderWidth: number;
                borderColor: string;
                boxShadow: string;
            };
        };
        divider: {
            borderColor: string;
            _dark: {
                borderColor: string;
            };
        };
        groupTitle: {
            mx: number;
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("icon" | "groupTitle" | "item" | "command" | "list" | "button" | "divider")[];
        }>;
    } | undefined;
    variants?: {
        dialog: () => {
            item: {
                px: number;
            };
            groupTitle: {
                color: string;
                px: number;
            };
        };
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: "dialog" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("icon" | "groupTitle" | "item" | "command" | "list" | "button" | "divider")[];
};

declare const modalTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        closeButton: {
            top: number;
            insetEnd: number;
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("body" | "footer" | "overlay" | "header" | "dialog" | "dialogContainer" | "closeButton")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("body" | "footer" | "overlay" | "header" | "dialog" | "dialogContainer" | "closeButton")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("body" | "footer" | "overlay" | "header" | "dialog" | "dialogContainer" | "closeButton")[];
};

declare const progressTheme: {
    baseStyle?: ((props: StyleFunctionProps) => {
        track: {
            borderRadius: string;
        };
        filledTrack: {
            bg: string;
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("label" | "track" | "filledTrack")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("label" | "track" | "filledTrack")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("label" | "track" | "filledTrack")[];
};

declare const radioTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        control: {
            _checked: {
                borderColor: string;
                bg: string;
                color: string;
            };
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "label" | "control")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "label" | "control")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "label" | "control")[];
};

declare const sliderTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        filledTrack: {
            bg: string;
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "track" | "mark" | "filledTrack" | "thumb")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "track" | "mark" | "filledTrack" | "thumb")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "track" | "mark" | "filledTrack" | "thumb")[];
};

declare const switchTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        track: {
            _checked: {
                bg: string;
            };
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "label" | "track" | "thumb")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "label" | "track" | "thumb")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "label" | "track" | "thumb")[];
};

declare const tooltipTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        [x: string]: string | string[] | {
            [x: string]: string;
        };
        display: string;
        _dark: {
            [x: string]: string;
        };
        px: string;
        py: string;
        bg: string[];
        borderRadius: string;
        fontWeight: string;
        fontSize: string;
        boxShadow: string;
        maxW: string;
        zIndex: string;
        borderWidth: string;
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};

declare const emptyStateTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        icon: {
            boxSize: (number | null)[];
            color: string;
            _dark: {
                color: string;
            };
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "body" | "icon" | "title" | "descripton" | "actions" | "footer")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "body" | "icon" | "title" | "descripton" | "actions" | "footer")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "body" | "icon" | "title" | "descripton" | "actions" | "footer")[];
};

declare const nprogressTheme: {
    baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
        bar: {
            bg: string;
            _dark: {
                bg: string;
            };
        };
    }) | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "bar")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("container" | "bar")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("container" | "bar")[];
};

declare const propertyTheme: {
    baseStyle?: {
        label: {
            color: string;
            _dark: {
                color: string;
            };
        };
    } | undefined;
    sizes?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("label" | "property" | "value")[];
        }>;
    } | undefined;
    variants?: {
        [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("label" | "property" | "value")[];
        }>;
    } | undefined;
    defaultProps?: {
        size?: string | number | undefined;
        variant?: string | number | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("label" | "property" | "value")[];
};

declare const stepperTheme: {
    baseStyle?: (({ colorScheme: c }: _chakra_ui_styled_system.StyleFunctionProps) => {
        container: {
            display: string;
            flexDirection: string;
            gap: number;
        };
        item: {
            w: string;
        };
        content: {
            "&[data-orientation=vertical]": {
                mt: number;
                ms: string;
                borderLeftWidth: string;
                ps: number;
            };
        };
        stepper: {
            [x: string]: string | {
                [x: string]: string;
            };
            gap: string;
            _dark: {
                [x: string]: string;
            };
        };
        separator: {
            transitionProperty: string;
            transitionDuration: string;
            "&[data-orientation=horizontal]": {
                height: string;
            };
            "&[data-orientation=vertical]": {
                width: string;
            };
            ".sui-steps__item .chakra-step &[data-orientation=vertical]": {
                display: string;
            };
            ".sui-steps__item &[data-orientation=vertical]": {
                position: string;
                minH: number;
                height: string;
                ms: string;
            };
        };
        step: {
            "&[data-orientation=vertical]": {
                alignItems: string;
            };
        };
    }) | undefined;
    sizes?: {
        xs: {
            stepper: {
                [x: string]: string;
            };
        };
        sm: {
            stepper: {
                [x: string]: string;
            };
        };
        md: {
            stepper: {
                [x: string]: string;
            };
        };
        lg: {
            stepper: {
                [x: string]: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
        solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            indicator: {
                '&[data-status=active]': {
                    borderWidth: string;
                    bg: string;
                    color: string;
                };
                '&[data-status=complete]': {
                    bg: string;
                    color: string;
                };
                '&[data-status=incomplete]': {
                    borderWidth: string;
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
            };
        };
        subtle: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
            stepper: {
                [x: string]: string;
            };
            indicator: {
                '&[data-status=active]': {
                    borderWidth: string;
                    bg: string;
                    color: string;
                    _dark: {
                        bg: string;
                    };
                };
                '&[data-status=complete]': {
                    bg: string;
                    color: string;
                    _dark: {
                        bg: string;
                        color: string;
                    };
                };
                '&[data-status=incomplete]': {
                    borderWidth: string;
                    bg: string;
                    color: string;
                    _dark: {
                        bg: string;
                        color: string;
                    };
                };
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | "xs" | undefined;
        variant?: "outline" | "subtle" | "solid" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("number" | "container" | "icon" | "title" | "content" | "description" | "item" | "stepper" | "separator" | "step" | "indicator")[];
};

declare const components: {
    Alert: {
        baseStyle?: {
            container: {
                borderRadius: string;
            };
        } | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "icon" | "title" | "description" | "spinner")[];
            }>;
        } | undefined;
        variants?: {
            snackbar: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                    borderWidth: string;
                };
                icon: {
                    color: string;
                    _dark: {
                        color: string;
                    };
                    '& .chakra-spinner': {
                        color: string;
                        _dark: {
                            color: string;
                        };
                    };
                };
                title: {
                    fontWeight: string;
                    fontSize: string;
                };
                description: {
                    fontSize: string;
                    color: string;
                    _dark: {
                        color: string;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "snackbar" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "icon" | "title" | "description" | "spinner")[];
    };
    Badge: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                _dark: {
                    [x: string]: string;
                };
            };
            ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                shadow: string;
                _dark: {
                    [x: string]: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "outline" | "ghost" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Button: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _dark: {
                        bg: string;
                        _disabled?: undefined;
                    };
                    _disabled: {
                        bg: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark?: undefined;
                };
                _dark?: undefined;
            } | {
                bg: string;
                color: string;
                _dark: {
                    bg: string;
                    color: string;
                };
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark: {
                        bg: string;
                        _disabled: {
                            bg: string;
                        };
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark: {
                        color: string;
                    };
                };
            } | {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark?: undefined;
                };
                _active: {
                    bg: string;
                    _dark?: undefined;
                };
                _disabled?: undefined;
                _dark?: undefined;
            };
            ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                color: string;
                _dark: {
                    color: string;
                };
                _hover: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                bg?: undefined;
            } | {
                color: string;
                _hover: {
                    bg: string;
                    _dark?: undefined;
                };
                _active: string;
                _dark?: undefined;
                bg?: undefined;
            } | {
                color: string;
                _dark: {
                    color: string;
                };
                bg: string;
                _hover: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
            };
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                borderColor: string;
                borderWidth: string;
                _hover: {
                    borderColor: string;
                };
                color: string;
                _dark: {
                    color: string;
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                bg?: undefined;
            } | {
                borderColor: string;
                borderWidth: string;
                _hover: {
                    borderColor: string;
                };
                color: string;
                _active: string;
                _dark?: undefined;
                bg?: undefined;
            } | {
                borderColor: string;
                borderWidth: string;
                _hover: {
                    borderColor: string;
                };
                color: string;
                _dark: {
                    color: string;
                };
                bg: string;
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
            };
            subtle: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                color: string;
                bg: string;
                _dark: {
                    bg: string;
                    color: string;
                };
                _hover: {
                    bg: string;
                    _dark: {
                        color: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
            } | {
                color: string;
                bg: string;
                _hover: {
                    bg: string;
                    _dark?: undefined;
                };
                _active: {
                    bg: string;
                    _dark?: undefined;
                };
                _dark?: undefined;
            };
            elevated: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _dark: {
                        bg: string;
                        _disabled?: undefined;
                    };
                    _disabled: {
                        bg: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark?: undefined;
                };
                _dark?: undefined;
                shadow: string;
            } | {
                bg: string;
                color: string;
                _dark: {
                    bg: string;
                    color: string;
                };
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark: {
                        bg: string;
                        _disabled: {
                            bg: string;
                        };
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark: {
                        color: string;
                    };
                };
                shadow: string;
            } | {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark?: undefined;
                };
                _active: {
                    bg: string;
                    _dark?: undefined;
                };
                _disabled?: undefined;
                _dark?: undefined;
                shadow: string;
            };
            link: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                padding: number;
                height: string;
                lineHeight: string;
                verticalAlign: string;
                color: string;
                _hover: {
                    textDecoration: string;
                    _disabled: {
                        textDecoration: string;
                    };
                };
                _active: {
                    color: string;
                };
            };
            primary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _dark: {
                        bg: string;
                        _disabled?: undefined;
                    };
                    _disabled: {
                        bg: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark?: undefined;
                };
                _dark?: undefined;
            } | {
                bg: string;
                color: string;
                _dark: {
                    bg: string;
                    color: string;
                };
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark: {
                        bg: string;
                        _disabled: {
                            bg: string;
                        };
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark: {
                        color: string;
                    };
                };
            } | {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark?: undefined;
                };
                _active: {
                    bg: string;
                    _dark?: undefined;
                };
                _disabled?: undefined;
                _dark?: undefined;
            };
            secondary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _dark: {
                        bg: string;
                        _disabled?: undefined;
                    };
                    _disabled: {
                        bg: string;
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark?: undefined;
                };
                _dark?: undefined;
            } | {
                bg: string;
                color: string;
                _dark: {
                    bg: string;
                    color: string;
                };
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark: {
                        bg: string;
                        _disabled: {
                            bg: string;
                        };
                    };
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                _disabled: {
                    color: string;
                    _dark: {
                        color: string;
                    };
                };
            } | {
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                    _dark?: undefined;
                };
                _active: {
                    bg: string;
                    _dark?: undefined;
                };
                _disabled?: undefined;
                _dark?: undefined;
            };
            tertiary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                borderColor: string;
                borderWidth: string;
                _hover: {
                    borderColor: string;
                };
                color: string;
                _dark: {
                    color: string;
                };
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
                bg?: undefined;
            } | {
                borderColor: string;
                borderWidth: string;
                _hover: {
                    borderColor: string;
                };
                color: string;
                _active: string;
                _dark?: undefined;
                bg?: undefined;
            } | {
                borderColor: string;
                borderWidth: string;
                _hover: {
                    borderColor: string;
                };
                color: string;
                _dark: {
                    color: string;
                };
                bg: string;
                _active: {
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "link" | "outline" | "subtle" | "solid" | "primary" | "ghost" | "elevated" | "secondary" | "tertiary" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Card: {
        baseStyle?: (() => {
            container: {
                transitionProperty: string;
                transitionDuration: string;
            };
        }) | undefined;
        sizes?: {
            sm: {
                container: {
                    [x: string]: string;
                };
            };
            md: {
                container: {
                    [x: string]: string;
                };
            };
            lg: {
                container: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            elevated: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    [x: string]: string | {
                        [x: string]: string;
                        _dark?: undefined;
                    } | {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    _dark: {
                        [x: string]: string;
                    };
                    '&.chakra-linkbox:hover': {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                };
            };
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    [x: string]: string | {
                        [x: string]: string;
                        '&.chakra-linkbox:hover'?: undefined;
                    } | {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        '&.chakra-linkbox:hover': {
                            [x: string]: string;
                        };
                    };
                    '&.chakra-linkbox:hover': {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        '&.chakra-linkbox:hover': {
                            [x: string]: string;
                        };
                    };
                };
            };
            filled: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    [x: string]: string | {
                        [x: string]: string;
                        '&.chakra-linkbox:hover'?: undefined;
                    } | {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        '&.chakra-linkbox:hover': {
                            [x: string]: string;
                        };
                    };
                    color: string;
                    '&.chakra-linkbox:hover': {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        '&.chakra-linkbox:hover': {
                            [x: string]: string;
                        };
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: "outline" | "filled" | "elevated" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "body" | "footer" | "header")[];
    };
    Checkbox: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            control: {
                _checked: {
                    borderColor: string;
                    bg: string;
                    color: string;
                };
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "icon" | "label" | "control")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "icon" | "label" | "control")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "icon" | "label" | "control")[];
    };
    CloseButton: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Heading: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Kbd: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            basic: {
                opacity: number;
            };
            solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                color: string;
                _dark: {
                    bg: string;
                };
                borderWidth: number;
                borderBottomWidth: number;
                padding: string;
                display: string;
                borderRadius: string;
                minW: string;
                textAlign: string;
                mr: number;
                ':last-child': {
                    mr: number;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "solid" | "basic" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Menu: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            list: {
                borderWidth: number;
                borderColor: string;
                boxShadow: string;
                _dark: {
                    borderWidth: number;
                    borderColor: string;
                    boxShadow: string;
                };
            };
            divider: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
            };
            groupTitle: {
                mx: number;
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("icon" | "groupTitle" | "item" | "command" | "list" | "button" | "divider")[];
            }>;
        } | undefined;
        variants?: {
            dialog: () => {
                item: {
                    px: number;
                };
                groupTitle: {
                    color: string;
                    px: number;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "dialog" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("icon" | "groupTitle" | "item" | "command" | "list" | "button" | "divider")[];
    };
    Modal: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            closeButton: {
                top: number;
                insetEnd: number;
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("body" | "footer" | "overlay" | "header" | "dialog" | "dialogContainer" | "closeButton")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("body" | "footer" | "overlay" | "header" | "dialog" | "dialogContainer" | "closeButton")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("body" | "footer" | "overlay" | "header" | "dialog" | "dialogContainer" | "closeButton")[];
    };
    Progress: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            track: {
                borderRadius: string;
            };
            filledTrack: {
                bg: string;
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("label" | "track" | "filledTrack")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("label" | "track" | "filledTrack")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "track" | "filledTrack")[];
    };
    Radio: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            control: {
                _checked: {
                    borderColor: string;
                    bg: string;
                    color: string;
                };
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "label" | "control")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "label" | "control")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "label" | "control")[];
    };
    Slider: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            filledTrack: {
                bg: string;
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "track" | "mark" | "filledTrack" | "thumb")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "track" | "mark" | "filledTrack" | "thumb")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "track" | "mark" | "filledTrack" | "thumb")[];
    };
    Switch: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            track: {
                _checked: {
                    bg: string;
                };
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "label" | "track" | "thumb")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "label" | "track" | "thumb")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "label" | "track" | "thumb")[];
    };
    Stepper: {
        baseStyle?: (({ colorScheme: c }: _chakra_ui_styled_system.StyleFunctionProps) => {
            container: {
                display: string;
                flexDirection: string;
                gap: number;
            };
            item: {
                w: string;
            };
            content: {
                "&[data-orientation=vertical]": {
                    mt: number;
                    ms: string;
                    borderLeftWidth: string;
                    ps: number;
                };
            };
            stepper: {
                [x: string]: string | {
                    [x: string]: string;
                };
                gap: string;
                _dark: {
                    [x: string]: string;
                };
            };
            separator: {
                transitionProperty: string;
                transitionDuration: string;
                "&[data-orientation=horizontal]": {
                    height: string;
                };
                "&[data-orientation=vertical]": {
                    width: string;
                };
                ".sui-steps__item .chakra-step &[data-orientation=vertical]": {
                    display: string;
                };
                ".sui-steps__item &[data-orientation=vertical]": {
                    position: string;
                    minH: number;
                    height: string;
                    ms: string;
                };
            };
            step: {
                "&[data-orientation=vertical]": {
                    alignItems: string;
                };
            };
        }) | undefined;
        sizes?: {
            xs: {
                stepper: {
                    [x: string]: string;
                };
            };
            sm: {
                stepper: {
                    [x: string]: string;
                };
            };
            md: {
                stepper: {
                    [x: string]: string;
                };
            };
            lg: {
                stepper: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
            solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                indicator: {
                    '&[data-status=active]': {
                        borderWidth: string;
                        bg: string;
                        color: string;
                    };
                    '&[data-status=complete]': {
                        bg: string;
                        color: string;
                    };
                    '&[data-status=incomplete]': {
                        borderWidth: string;
                        bg: string;
                        _dark: {
                            bg: string;
                        };
                    };
                };
            };
            subtle: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                stepper: {
                    [x: string]: string;
                };
                indicator: {
                    '&[data-status=active]': {
                        borderWidth: string;
                        bg: string;
                        color: string;
                        _dark: {
                            bg: string;
                        };
                    };
                    '&[data-status=complete]': {
                        bg: string;
                        color: string;
                        _dark: {
                            bg: string;
                            color: string;
                        };
                    };
                    '&[data-status=incomplete]': {
                        borderWidth: string;
                        bg: string;
                        color: string;
                        _dark: {
                            bg: string;
                            color: string;
                        };
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | "xs" | undefined;
            variant?: "outline" | "subtle" | "solid" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("number" | "container" | "icon" | "title" | "content" | "description" | "item" | "stepper" | "separator" | "step" | "indicator")[];
    };
    Tooltip: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            [x: string]: string | string[] | {
                [x: string]: string;
            };
            display: string;
            _dark: {
                [x: string]: string;
            };
            px: string;
            py: string;
            bg: string[];
            borderRadius: string;
            fontWeight: string;
            fontSize: string;
            boxShadow: string;
            maxW: string;
            zIndex: string;
            borderWidth: string;
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Input: {
        baseStyle?: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("group" | "addon" | "field" | "element")[];
        }> | undefined;
        sizes?: {
            sm: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            md: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            lg: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                field: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                    _hover: {
                        borderColor: string;
                        _dark: {
                            borderColor: string;
                        };
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("group" | "addon" | "field" | "element")[];
    };
    PinInput: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            sm: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            md: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            lg: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                field: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                    _hover: {
                        borderColor: string;
                        _dark: {
                            borderColor: string;
                        };
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    FormLabel: {
        variants: {
            horizontal: {
                mb: number;
                marginStart: string;
            };
        };
    };
    NumberInput: {
        baseStyle?: _chakra_ui_styled_system.PartsStyleInterpolation<{
            keys: ("group" | "addon" | "field" | "element")[];
        }> | undefined;
        sizes?: {
            sm: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            md: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            lg: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                field: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                    _hover: {
                        borderColor: string;
                        _dark: {
                            borderColor: string;
                        };
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("group" | "addon" | "field" | "element")[];
    };
    Select: {
        baseStyle?: Partial<Record<"group" | "addon" | "field" | "element", _chakra_ui_styled_system.SystemStyleObject>> | _chakra_ui_styled_system.PartsStyleFunction<{
            keys: ("group" | "addon" | "field" | "element")[];
        }> | undefined;
        sizes?: {
            sm: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            md: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            lg: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                field: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                    _hover: {
                        borderColor: string;
                        _dark: {
                            borderColor: string;
                        };
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Textarea: {
        baseStyle?: _chakra_ui_styled_system.SystemStyleInterpolation | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    SuiEmptyState: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            icon: {
                boxSize: (number | null)[];
                color: string;
                _dark: {
                    color: string;
                };
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "body" | "icon" | "title" | "descripton" | "actions" | "footer")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "body" | "icon" | "title" | "descripton" | "actions" | "footer")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "body" | "icon" | "title" | "descripton" | "actions" | "footer")[];
    };
    SuiNProgress: {
        baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
            bar: {
                bg: string;
                _dark: {
                    bg: string;
                };
            };
        }) | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "bar")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("container" | "bar")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "bar")[];
    };
    SuiProperty: {
        baseStyle?: {
            label: {
                color: string;
                _dark: {
                    color: string;
                };
            };
        } | undefined;
        sizes?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("label" | "property" | "value")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                keys: ("label" | "property" | "value")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "property" | "value")[];
    };
    SuiSelect: {
        baseStyle?: {
            addon: {
                height: string;
                fontSize: string;
                px: string;
                borderRadius: string;
            };
            field: {
                width: string;
                height: string;
                fontSize: string;
                px: string;
                borderRadius: string;
                minWidth: number;
                outline: number;
                position: string;
                appearance: string;
                transitionProperty: string;
                transitionDuration: string;
                _disabled: {
                    opacity: number;
                    cursor: string;
                };
            };
        } | undefined;
        sizes?: {
            sm: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            md: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
            lg: {
                field: {
                    [x: string]: string;
                };
                group: {
                    [x: string]: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                field?: {
                    borderColor: string;
                    _dark: {
                        borderColor: string;
                    };
                    _hover: {
                        borderColor: string;
                        _dark: {
                            borderColor: string;
                        };
                    };
                } | undefined;
            };
            flushed: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
            filled: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
            unstyled: {};
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: "outline" | "filled" | "unstyled" | "flushed" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
};

export { alertTheme as Alert, badgeTheme as Badge, buttonTheme as Button, cardTheme as Card, checkboxTheme as Checkbox, closeButtonTheme as CloseButton, formLabelTheme as FormLabel, headingTheme as Heading, inputTheme as Input, kbdTheme as Kbd, menuTheme as Menu, modalTheme as Modal, numberInputTheme as NumberInput, pinInputTheme as PinInput, progressTheme as Progress, radioTheme as Radio, nativeSelectTheme as Select, sliderTheme as Slider, emptyStateTheme as SuiEmptyState, nprogressTheme as SuiNProgress, propertyTheme as SuiProperty, selectTheme as SuiSelect, stepperTheme as SuiStepper, switchTheme as Switch, textareaTheme as Textarea, tooltipTheme as Tooltip, components };
