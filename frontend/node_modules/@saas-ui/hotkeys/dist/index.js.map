{"version":3,"sources":["../src/index.ts","../src/hotkeys.tsx"],"sourcesContent":["export {\n  HotkeysProvider,\n  useHotkeysContext,\n  splitKeys,\n  useHotkeys,\n  useHotkeysShortcut,\n  Hotkey,\n  createHotkeys,\n} from '@saas-ui/use-hotkeys'\nexport type {\n  HotkeysProviderProps,\n  UseHotkeysOptions,\n  HotkeysConfig,\n  HotkeyProps,\n  HotkeysContextValues,\n  HotkeysGroupConfig,\n  HotkeysGroupItems,\n  HotkeysItemConfig,\n} from '@saas-ui/use-hotkeys'\n\nexport {\n  HotkeysCommand,\n  HotkeysGroup,\n  HotkeysItem,\n  HotkeysList,\n  HotkeysListItems,\n  HotkeysSearch,\n  useHotkeysSearch,\n} from './hotkeys'\nexport type {\n  HotkeysGroupProps,\n  HotkeysItemProps,\n  HotkeysListProps,\n  HotkeysOptions,\n  UseHotkeysListReturn,\n} from './hotkeys'\n\nimport { HotkeysConfig } from '@saas-ui/use-hotkeys'\n\n/**\n * @deprecated Use `HotkeysConfig` instead.\n */\nexport type HotkeysListOptions = HotkeysConfig\n","import * as React from 'react'\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  omitThemingProps,\n  useMultiStyleConfig,\n  createStylesContext,\n} from '@chakra-ui/react'\nimport { cx } from '@chakra-ui/utils'\nimport { createContext } from '@chakra-ui/react-utils'\n\nimport { Kbd } from '@chakra-ui/react'\n\nimport { SearchInput, SearchInputProps } from '@saas-ui/core'\n\nconst [StylesProvider, useStyles] = createStylesContext('SuiHotkeys')\n\nconst regExpSyntaxCharacter = /[.*+?^${}()|[\\]\\\\]/g\n\nfunction escapeRegExp(value: string) {\n  return value.replace(regExpSyntaxCharacter, '\\\\$&')\n}\n\nimport {\n  HotkeysGroupItems,\n  HotkeysItemConfig,\n  splitKeys,\n} from '@saas-ui/use-hotkeys'\nimport { HotkeysConfig } from '@saas-ui/use-hotkeys'\n\nexport interface HotkeysOptions {\n  hotkeys: HotkeysConfig\n}\n\nexport interface UseHotkeysListReturn {\n  query?: string\n  setQuery: (query: string) => void\n  hotkeys: HotkeysConfig\n}\n\nconst [HotkeysListProvider, useHotkeysListContext] =\n  createContext<UseHotkeysListReturn>({\n    name: 'HotkeysListContext',\n  })\n\nconst useHotkeysList = (props: HotkeysListProps) => {\n  const [query, setQuery] = React.useState<string>('')\n\n  const { hotkeys } = props\n\n  return {\n    hotkeys,\n    query,\n    setQuery,\n  }\n}\n\nexport interface HotkeysListProps\n  extends HotkeysOptions,\n    HTMLChakraProps<'div'>,\n    ThemingProps<'SuiHotkeys'> {}\n\nexport const HotkeysList = forwardRef<HotkeysListProps, 'div'>(\n  ({ children, ...props }, ref) => {\n    const styles = useMultiStyleConfig('SuiHotkeys', props)\n    const ownProps = omitThemingProps(props)\n\n    const context = useHotkeysList(ownProps)\n\n    return (\n      <chakra.div\n        {...props}\n        ref={ref}\n        __css={styles.container}\n        className={cx('sui-hotkeys', props.className)}\n      >\n        <HotkeysListProvider value={context}>\n          <StylesProvider value={styles}>{children}</StylesProvider>\n        </HotkeysListProvider>\n      </chakra.div>\n    )\n  }\n)\n\nHotkeysList.displayName = 'HotkeysList'\n\nexport const useHotkeysSearch = () => {\n  return useHotkeysListContext()\n}\n\nexport const HotkeysSearch = forwardRef<Omit<SearchInputProps, 'as'>, 'input'>(\n  (props, ref) => {\n    const { query, setQuery } = useHotkeysSearch()\n\n    return (\n      <SearchInput\n        {...props}\n        ref={ref}\n        value={query}\n        onChange={({ target }) => setQuery(target.value)}\n        onReset={() => setQuery('')}\n      />\n    )\n  }\n)\n\nHotkeysSearch.displayName = 'HotkeysSearch'\n\nconst filterHotkeys = (\n  hotkeys: HotkeysGroupItems,\n  query?: string\n): HotkeysItemConfig[] | null => {\n  const results = Object.values(hotkeys).reduce(\n    (hotkeys: Array<HotkeysItemConfig>, key) => {\n      const { label } = key\n      const re = query && new RegExp(escapeRegExp(query), 'i')\n\n      const command = Array.isArray(key.command) ? key.command : [key.command]\n      if (!re || label.match(re) || command.some((c) => c.match(re))) {\n        hotkeys.push(key)\n      }\n\n      return hotkeys\n    },\n    []\n  )\n\n  if (!results?.length) {\n    return null\n  }\n\n  return results\n}\n\nexport const HotkeysListItems = forwardRef<HTMLChakraProps<'div'>, 'div'>(\n  (props, ref) => {\n    const { hotkeys, query } = useHotkeysListContext()\n    return (\n      <chakra.div\n        {...props}\n        ref={ref}\n        className={cx('sui-hotkeys__list-items', props.className)}\n      >\n        {Object.values(hotkeys).map((group, i) => {\n          const results = filterHotkeys(group.hotkeys, query)\n\n          if (!results?.length) {\n            return null\n          }\n\n          return (\n            <HotkeysGroup title={group.title} key={i}>\n              {results.map(({ label, command }: HotkeysItemConfig) => {\n                const c = Array.isArray(command) ? command[0] : command\n                return (\n                  <HotkeysItem command={c} key={c}>\n                    {label}\n                  </HotkeysItem>\n                )\n              })}\n            </HotkeysGroup>\n          )\n        })}\n      </chakra.div>\n    )\n  }\n)\n\nHotkeysListItems.displayName = 'HotkeysListItems'\n\nexport interface HotkeysGroupProps extends HTMLChakraProps<'div'> {\n  title?: string\n}\n\nexport const HotkeysGroup: React.FC<HotkeysGroupProps> = (props) => {\n  const { title, children, ...rest } = props\n  const styles = useStyles()\n\n  const groupStyles = {\n    my: 2,\n    py: 2,\n    ...styles.group,\n  }\n\n  const titleStyles = {\n    py: 2,\n    fontWeight: 'semibold',\n    ...styles.groupTitle,\n  }\n\n  return (\n    <chakra.div\n      {...rest}\n      __css={groupStyles}\n      className={cx('sui-hotkeys__group', props.className)}\n    >\n      {title && <chakra.p __css={titleStyles}>{title}</chakra.p>}\n      {children}\n    </chakra.div>\n  )\n}\n\nHotkeysGroup.displayName = 'HotkeysGroup'\n\nexport const HotkeysCommand: React.FC<HTMLChakraProps<'span'>> = (props) => {\n  const { children, ...rest } = props\n  const styles = useStyles()\n\n  let keys\n  if (typeof children === 'string') {\n    keys = splitKeys(children).map((key, i) => {\n      if (key === 'then') {\n        return (\n          <chakra.span key={key} __css={styles.then}>\n            {key}\n          </chakra.span>\n        )\n      }\n      return <Kbd key={key}>{key}</Kbd>\n    })\n  }\n\n  return (\n    <chakra.span\n      {...rest}\n      __css={styles.command}\n      className={cx('sui-hotkeys__command', props.className)}\n    >\n      {keys || children}\n    </chakra.span>\n  )\n}\n\nHotkeysCommand.displayName = 'HotkeysCommand'\n\nexport interface HotkeysItemProps extends HTMLChakraProps<'div'> {\n  command: string\n}\n\nexport const HotkeysItem: React.FC<HotkeysItemProps> = (props) => {\n  const { command, children } = props\n  const styles = useStyles()\n\n  const itemStyles = {\n    display: 'flex',\n    alignItems: 'center',\n    textAlign: 'start',\n    flex: '0 0 auto',\n    ...styles.item,\n  }\n\n  return (\n    <chakra.div\n      __css={itemStyles}\n      className={cx('sui-hotkeys__item', props.className)}\n    >\n      <chakra.span flex=\"1\">{children}</chakra.span>\n      <HotkeysCommand>{command}</HotkeysCommand>\n    </chakra.div>\n  )\n}\n\nHotkeysItem.displayName = 'HotkeysItem'\n"],"mappings":"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","names":["import_use_hotkeys","import_react","hotkeys"]}