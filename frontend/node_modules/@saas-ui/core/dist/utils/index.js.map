{"version":3,"sources":["../../src/utils/index.ts","../../src/utils/split-props.ts","../../src/utils/create-props.ts"],"sourcesContent":["export type { SplitPropsFn } from './split-props'\nexport { createSplitProps, splitProps } from './split-props'\n\nexport { createProps } from './create-props'\n\nexport {\n  __DEV__,\n  __TEST__,\n  PanSession,\n  addDomEvent,\n  addItem,\n  addPointerEvent,\n  analyzeBreakpoints,\n  ariaAttr,\n  arrayToObjectNotation,\n  breakpoints,\n  calculateBox,\n  callAll,\n  callAllHandlers,\n  canUseDOM,\n  chunk,\n  clampValue,\n  closest,\n  compose,\n  contains,\n  countDecimalPlaces,\n  createBox,\n  cx,\n  dataAttr,\n  detectBrowser,\n  detectDeviceType,\n  detectOS,\n  detectTouch,\n  determineLazyBehavior,\n  distance,\n  error,\n  expand,\n  extractEventInfo,\n  filterUndefined,\n  flatten,\n  focus,\n  focusNextTabbable,\n  focusPreviousTabbable,\n  fromEntries,\n  get,\n  getActiveElement,\n  getAllFocusable,\n  getAllTabbable,\n  getBox,\n  getCSSVar,\n  getEventWindow,\n  getFirstFocusable,\n  getFirstItem,\n  getFirstTabbableIn,\n  getLastItem,\n  getLastTabbableIn,\n  getNextIndex,\n  getNextItem,\n  getNextItemFromSearch,\n  getNextTabbable,\n  getOwnerDocument,\n  getOwnerWindow,\n  getPointerEventName,\n  getPrevIndex,\n  getPrevItem,\n  getPreviousTabbable,\n  getRect,\n  getRelatedTarget,\n  getViewportPointFromEvent,\n  getWithDefault,\n  hasDisplayNone,\n  hasFocusWithin,\n  hasNegativeTabIndex,\n  hasTabIndex,\n  isActiveElement,\n  isArray,\n  isBrowser,\n  isContentEditable,\n  isCssVar,\n  isCustomBreakpoint,\n  isDefined,\n  isDisabled,\n  isElement,\n  isEmpty,\n  isEmptyArray,\n  isEmptyObject,\n  isFocusable,\n  isFunction,\n  isHTMLElement,\n  isHidden,\n  isInputElement,\n  isInputEvent,\n  isMouseEvent,\n  isMultiTouchEvent,\n  isNotEmptyObject,\n  isNotNumber,\n  isNull,\n  isNumber,\n  isNumeric,\n  isObject,\n  isRefObject,\n  isResponsiveObjectLike,\n  isRightClick,\n  isString,\n  isTabbable,\n  isTouchEvent,\n  isUndefined,\n  mapResponsive,\n  maxSafeInteger,\n  memoize,\n  memoizedGet,\n  mergeWith,\n  minSafeInteger,\n  noop,\n  normalizeEventKey,\n  objectFilter,\n  objectKeys,\n  objectToArrayNotation,\n  offset,\n  omit,\n  once,\n  percentToValue,\n  pick,\n  pipe,\n  px,\n  removeIndex,\n  removeItem,\n  roundValueToStep,\n  runIfFn,\n  shrink,\n  split,\n  toMediaQueryString,\n  toPrecision,\n  valueToPercent,\n  walkObject,\n  warn,\n  withScroll,\n  wrapPointerEventHandler,\n} from '@chakra-ui/utils'\n\nexport type {\n  AnalyzeBreakpointsReturn,\n  AnyFunction,\n  AnyPointerEvent,\n  AnyRectType,\n  Booleanish,\n  BoxModel,\n  CreateBoxArgs,\n  Dict,\n  EventHandler,\n  EventKeys,\n  EventListenerWithPointInfo,\n  ExtendedFocusOptions,\n  FocusableElement,\n  FunctionArguments,\n  LazyBehavior,\n  LiteralUnion,\n  MappedLeavesObject,\n  MaybeFunction,\n  Merge,\n  Omit,\n  PanEventHandler,\n  PanEventInfo,\n  PanSessionHandlers,\n  PanSessionOptions,\n  Point,\n  PointerEventInfo,\n  Position,\n  Rect,\n  Spacing,\n  StringOrNumber,\n  UnionStringArray,\n  UserAgentBrowser,\n  UserAgentDeviceType,\n  UserAgentOS,\n  WalkObjectPredicate,\n} from '@chakra-ui/utils'\n","type Dict = Record<string, any>\ntype PredicateFn<T> = (key: T) => boolean\n\nexport interface SplitPropsFn {\n  <T extends Dict, K extends keyof T>(\n    props: T,\n    keys: K[]\n  ): [Pick<T, K>, Omit<T, K>]\n\n  <T extends Dict, K extends PredicateFn<keyof T>>(\n    props: T,\n    keys: K\n  ): [Dict, Dict]\n}\n\nexport const splitProps: SplitPropsFn = (props: any, keys: any) => {\n  const picked = {} as any\n  const omitted = { ...props }\n\n  if (typeof keys === 'function') {\n    for (const key in props) {\n      if (keys(key)) {\n        picked[key] = props[key]\n        delete omitted[key]\n      }\n    }\n  } else {\n    for (const key of keys) {\n      picked[key] = props[key]\n      delete omitted[key]\n    }\n  }\n\n  return [picked, omitted] as any\n}\n\nexport const createSplitProps = <T>(keys: (keyof T)[]) => {\n  return function split<Props extends T>(\n    props: Props\n  ): [T, Omit<Props, keyof T>] {\n    // @ts-expect-error\n    return splitProps(props, keys)\n  }\n}\n","type StrictKeys<K extends (keyof T)[], T> = K extends (keyof T)[]\n  ? [keyof T] extends [K[number]]\n    ? unknown\n    : `Missing required keys: ${Exclude<keyof T, K[number]>}`\n  : never\n\nexport const createProps =\n  <T extends Record<never, never>>() =>\n  <K extends (keyof T)[]>(props: K & StrictKeys<K, T>) =>\n    Array.from(new Set(props))\n"],"mappingseO,IAAM,aAA2B,CAAC,OAAY,SAAc;AACjE,QAAM,SAAS,CAAC;AAChB,QAAM,UAAU,EAAE,GAAG,MAAM;AAE3B,MAAI,OAAO,SAAS,YAAY;AAC9B,eAAW,OAAO,OAAO;AACvB,UAAI,KAAK,GAAG,GAAG;AACb,eAAO,GAAG,IAAI,MAAM,GAAG;AACvB,eAAO,QAAQ,GAAG;AAAA,MACpB;AAAA,IACF;AAAA,EACF,OAAO;AACL,eAAW,OAAO,MAAM;AACtB,aAAO,GAAG,IAAI,MAAM,GAAG;AACvB,aAAO,QAAQ,GAAG;AAAA,IACpB;AAAA,EACF;AAEA,SAAO,CAAC,QAAQ,OAAO;AACzB;AAEO,IAAM,mBAAmB,CAAI,SAAsB;AACxD,SAAO,SAASA,OACd,OAC2B;AAE3B,WAAO,WAAW,OAAO,IAAI;AAAA,EAC/B;AACF;;;ACrCO,IAAM,cACX,MACA,CAAwB,UACtB,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC;;;AFJ7B,mBAqIO;","names":["split"]}