'use client'
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/index.ts
var utils_exports = {};
__export(utils_exports, {
  PanSession: () => import_utils.PanSession,
  __DEV__: () => import_utils.__DEV__,
  __TEST__: () => import_utils.__TEST__,
  addDomEvent: () => import_utils.addDomEvent,
  addItem: () => import_utils.addItem,
  addPointerEvent: () => import_utils.addPointerEvent,
  analyzeBreakpoints: () => import_utils.analyzeBreakpoints,
  ariaAttr: () => import_utils.ariaAttr,
  arrayToObjectNotation: () => import_utils.arrayToObjectNotation,
  breakpoints: () => import_utils.breakpoints,
  calculateBox: () => import_utils.calculateBox,
  callAll: () => import_utils.callAll,
  callAllHandlers: () => import_utils.callAllHandlers,
  canUseDOM: () => import_utils.canUseDOM,
  chunk: () => import_utils.chunk,
  clampValue: () => import_utils.clampValue,
  closest: () => import_utils.closest,
  compose: () => import_utils.compose,
  contains: () => import_utils.contains,
  countDecimalPlaces: () => import_utils.countDecimalPlaces,
  createBox: () => import_utils.createBox,
  createProps: () => createProps,
  createSplitProps: () => createSplitProps,
  cx: () => import_utils.cx,
  dataAttr: () => import_utils.dataAttr,
  detectBrowser: () => import_utils.detectBrowser,
  detectDeviceType: () => import_utils.detectDeviceType,
  detectOS: () => import_utils.detectOS,
  detectTouch: () => import_utils.detectTouch,
  determineLazyBehavior: () => import_utils.determineLazyBehavior,
  distance: () => import_utils.distance,
  error: () => import_utils.error,
  expand: () => import_utils.expand,
  extractEventInfo: () => import_utils.extractEventInfo,
  filterUndefined: () => import_utils.filterUndefined,
  flatten: () => import_utils.flatten,
  focus: () => import_utils.focus,
  focusNextTabbable: () => import_utils.focusNextTabbable,
  focusPreviousTabbable: () => import_utils.focusPreviousTabbable,
  fromEntries: () => import_utils.fromEntries,
  get: () => import_utils.get,
  getActiveElement: () => import_utils.getActiveElement,
  getAllFocusable: () => import_utils.getAllFocusable,
  getAllTabbable: () => import_utils.getAllTabbable,
  getBox: () => import_utils.getBox,
  getCSSVar: () => import_utils.getCSSVar,
  getEventWindow: () => import_utils.getEventWindow,
  getFirstFocusable: () => import_utils.getFirstFocusable,
  getFirstItem: () => import_utils.getFirstItem,
  getFirstTabbableIn: () => import_utils.getFirstTabbableIn,
  getLastItem: () => import_utils.getLastItem,
  getLastTabbableIn: () => import_utils.getLastTabbableIn,
  getNextIndex: () => import_utils.getNextIndex,
  getNextItem: () => import_utils.getNextItem,
  getNextItemFromSearch: () => import_utils.getNextItemFromSearch,
  getNextTabbable: () => import_utils.getNextTabbable,
  getOwnerDocument: () => import_utils.getOwnerDocument,
  getOwnerWindow: () => import_utils.getOwnerWindow,
  getPointerEventName: () => import_utils.getPointerEventName,
  getPrevIndex: () => import_utils.getPrevIndex,
  getPrevItem: () => import_utils.getPrevItem,
  getPreviousTabbable: () => import_utils.getPreviousTabbable,
  getRect: () => import_utils.getRect,
  getRelatedTarget: () => import_utils.getRelatedTarget,
  getViewportPointFromEvent: () => import_utils.getViewportPointFromEvent,
  getWithDefault: () => import_utils.getWithDefault,
  hasDisplayNone: () => import_utils.hasDisplayNone,
  hasFocusWithin: () => import_utils.hasFocusWithin,
  hasNegativeTabIndex: () => import_utils.hasNegativeTabIndex,
  hasTabIndex: () => import_utils.hasTabIndex,
  isActiveElement: () => import_utils.isActiveElement,
  isArray: () => import_utils.isArray,
  isBrowser: () => import_utils.isBrowser,
  isContentEditable: () => import_utils.isContentEditable,
  isCssVar: () => import_utils.isCssVar,
  isCustomBreakpoint: () => import_utils.isCustomBreakpoint,
  isDefined: () => import_utils.isDefined,
  isDisabled: () => import_utils.isDisabled,
  isElement: () => import_utils.isElement,
  isEmpty: () => import_utils.isEmpty,
  isEmptyArray: () => import_utils.isEmptyArray,
  isEmptyObject: () => import_utils.isEmptyObject,
  isFocusable: () => import_utils.isFocusable,
  isFunction: () => import_utils.isFunction,
  isHTMLElement: () => import_utils.isHTMLElement,
  isHidden: () => import_utils.isHidden,
  isInputElement: () => import_utils.isInputElement,
  isInputEvent: () => import_utils.isInputEvent,
  isMouseEvent: () => import_utils.isMouseEvent,
  isMultiTouchEvent: () => import_utils.isMultiTouchEvent,
  isNotEmptyObject: () => import_utils.isNotEmptyObject,
  isNotNumber: () => import_utils.isNotNumber,
  isNull: () => import_utils.isNull,
  isNumber: () => import_utils.isNumber,
  isNumeric: () => import_utils.isNumeric,
  isObject: () => import_utils.isObject,
  isRefObject: () => import_utils.isRefObject,
  isResponsiveObjectLike: () => import_utils.isResponsiveObjectLike,
  isRightClick: () => import_utils.isRightClick,
  isString: () => import_utils.isString,
  isTabbable: () => import_utils.isTabbable,
  isTouchEvent: () => import_utils.isTouchEvent,
  isUndefined: () => import_utils.isUndefined,
  mapResponsive: () => import_utils.mapResponsive,
  maxSafeInteger: () => import_utils.maxSafeInteger,
  memoize: () => import_utils.memoize,
  memoizedGet: () => import_utils.memoizedGet,
  mergeWith: () => import_utils.mergeWith,
  minSafeInteger: () => import_utils.minSafeInteger,
  noop: () => import_utils.noop,
  normalizeEventKey: () => import_utils.normalizeEventKey,
  objectFilter: () => import_utils.objectFilter,
  objectKeys: () => import_utils.objectKeys,
  objectToArrayNotation: () => import_utils.objectToArrayNotation,
  offset: () => import_utils.offset,
  omit: () => import_utils.omit,
  once: () => import_utils.once,
  percentToValue: () => import_utils.percentToValue,
  pick: () => import_utils.pick,
  pipe: () => import_utils.pipe,
  px: () => import_utils.px,
  removeIndex: () => import_utils.removeIndex,
  removeItem: () => import_utils.removeItem,
  roundValueToStep: () => import_utils.roundValueToStep,
  runIfFn: () => import_utils.runIfFn,
  shrink: () => import_utils.shrink,
  split: () => import_utils.split,
  splitProps: () => splitProps,
  toMediaQueryString: () => import_utils.toMediaQueryString,
  toPrecision: () => import_utils.toPrecision,
  valueToPercent: () => import_utils.valueToPercent,
  walkObject: () => import_utils.walkObject,
  warn: () => import_utils.warn,
  withScroll: () => import_utils.withScroll,
  wrapPointerEventHandler: () => import_utils.wrapPointerEventHandler
});
module.exports = __toCommonJS(utils_exports);

// src/utils/split-props.ts
var splitProps = (props, keys) => {
  const picked = {};
  const omitted = { ...props };
  if (typeof keys === "function") {
    for (const key in props) {
      if (keys(key)) {
        picked[key] = props[key];
        delete omitted[key];
      }
    }
  } else {
    for (const key of keys) {
      picked[key] = props[key];
      delete omitted[key];
    }
  }
  return [picked, omitted];
};
var createSplitProps = (keys) => {
  return function split2(props) {
    return splitProps(props, keys);
  };
};

// src/utils/create-props.ts
var createProps = () => (props) => Array.from(new Set(props));

// src/utils/index.ts
var import_utils = require("@chakra-ui/utils");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PanSession,
  __DEV__,
  __TEST__,
  addDomEvent,
  addItem,
  addPointerEvent,
  analyzeBreakpoints,
  ariaAttr,
  arrayToObjectNotation,
  breakpoints,
  calculateBox,
  callAll,
  callAllHandlers,
  canUseDOM,
  chunk,
  clampValue,
  closest,
  compose,
  contains,
  countDecimalPlaces,
  createBox,
  createProps,
  createSplitProps,
  cx,
  dataAttr,
  detectBrowser,
  detectDeviceType,
  detectOS,
  detectTouch,
  determineLazyBehavior,
  distance,
  error,
  expand,
  extractEventInfo,
  filterUndefined,
  flatten,
  focus,
  focusNextTabbable,
  focusPreviousTabbable,
  fromEntries,
  get,
  getActiveElement,
  getAllFocusable,
  getAllTabbable,
  getBox,
  getCSSVar,
  getEventWindow,
  getFirstFocusable,
  getFirstItem,
  getFirstTabbableIn,
  getLastItem,
  getLastTabbableIn,
  getNextIndex,
  getNextItem,
  getNextItemFromSearch,
  getNextTabbable,
  getOwnerDocument,
  getOwnerWindow,
  getPointerEventName,
  getPrevIndex,
  getPrevItem,
  getPreviousTabbable,
  getRect,
  getRelatedTarget,
  getViewportPointFromEvent,
  getWithDefault,
  hasDisplayNone,
  hasFocusWithin,
  hasNegativeTabIndex,
  hasTabIndex,
  isActiveElement,
  isArray,
  isBrowser,
  isContentEditable,
  isCssVar,
  isCustomBreakpoint,
  isDefined,
  isDisabled,
  isElement,
  isEmpty,
  isEmptyArray,
  isEmptyObject,
  isFocusable,
  isFunction,
  isHTMLElement,
  isHidden,
  isInputElement,
  isInputEvent,
  isMouseEvent,
  isMultiTouchEvent,
  isNotEmptyObject,
  isNotNumber,
  isNull,
  isNumber,
  isNumeric,
  isObject,
  isRefObject,
  isResponsiveObjectLike,
  isRightClick,
  isString,
  isTabbable,
  isTouchEvent,
  isUndefined,
  mapResponsive,
  maxSafeInteger,
  memoize,
  memoizedGet,
  mergeWith,
  minSafeInteger,
  noop,
  normalizeEventKey,
  objectFilter,
  objectKeys,
  objectToArrayNotation,
  offset,
  omit,
  once,
  percentToValue,
  pick,
  pipe,
  px,
  removeIndex,
  removeItem,
  roundValueToStep,
  runIfFn,
  shrink,
  split,
  splitProps,
  toMediaQueryString,
  toPrecision,
  valueToPercent,
  walkObject,
  warn,
  withScroll,
  wrapPointerEventHandler
});
//# sourceMappingURL=index.js.map